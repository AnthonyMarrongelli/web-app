{"ast":null,"code":"var _jsxFileName = \"/Users/sathv/Desktop/web-app/app/src/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport './global.css';\nimport './index.css';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"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\";\nfunction Dashboard() {\n  _s();\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I am Fin, your chatbot!\",\n    sender: \"ChatGPT\"\n  }]);\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    await processMessage(newMessages);\n  };\n  async function processMessage(chatMessages) {\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain like a finance bot.\"\n    };\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessages]\n    };\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      if (data && data.choices && data.choices.length > 0) {\n        console.log(data.choices[0].message.content);\n      } else {\n        console.error('Unexpected API response:', data);\n      }\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setTyping(false);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dash-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"500px\",\n        width: \"400px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"Fin is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 51\n            }, this) : null,\n            children: messages.map((message, i) => {\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 40\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(Dashboard, \"3hG4W1LNtVuLkLTIgDx63ybZyI0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","API_KEY","Dashboard","_s","typing","setTyping","messages","setMessages","message","sender","handleSend","newMessage","direction","newMessages","processMessage","chatMessages","apiMessages","map","messageObject","role","content","systemMessage","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","json","choices","length","console","log","error","className","children","style","position","height","width","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["/Users/sathv/Desktop/web-app/app/src/Dashboard.js"],"sourcesContent":["import React from 'react';\nimport {useState} from 'react'\nimport './global.css';\nimport './index.css';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css'\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\"\n\nconst API_KEY = \"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\"\n\nfunction Dashboard() {\n    const [typing, setTyping] = useState(false);\n    const [messages, setMessages] = useState([\n        {\n            message: \"Hello, I am Fin, your chatbot!\",\n            sender: \"ChatGPT\"\n        }\n    ])\n\n    const handleSend = async(message) => {\n        const newMessage = {\n            message: message,\n            sender: \"user\",\n            direction: \"outgoing\"\n        }\n\n        const newMessages = [...messages, newMessage];\n\n        setMessages(newMessages);\n\n        setTyping(true);\n        await processMessage(newMessages);\n    }\n\n    async function processMessage(chatMessages) {\n\n        let apiMessages = chatMessages.map((messageObject) => {\n            let role= \"\";\n            if (messageObject.sender === \"ChatGPT\")\n            {\n                role=\"assistant\"\n            }\n            else\n            {\n                role=\"user\"\n            }\n            return {role: role, content: messageObject.message}\n        });\n\n        const systemMessage = {\n            role: \"system\",\n            content:\"Explain like a finance bot.\"\n        }\n\n        const apiRequestBody = {\n            \"model\": \"gpt-3.5-turbo\",\n            \"messages\": [\n                systemMessage,\n                ...apiMessages\n            ]\n        };\n\n        await fetch (\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": \"Bearer \" + API_KEY,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(apiRequestBody)\n        }).then((data) => {\n            return data.json();\n        }).then((data) => {\n            if (data && data.choices && data.choices.length > 0) {\n               console.log(data.choices[0].message.content);\n            } else {\n                console.error('Unexpected API response:', data);\n            }\n            setMessages([\n                ...chatMessages,\n                {\n                    message: data.choices[0].message.content,\n                    sender:\"ChatGPT\"\n                }\n            ]);\n            setTyping(false);\n        });\n    }\n\n    return (\n        <div className=\"dash-page\">\n            <div style={{position: \"relative\", height: \"500px\", width: \"400px\"}}>\n                <MainContainer>\n                    <ChatContainer>\n                        <MessageList\n                        typingIndicator={typing ? <TypingIndicator content=\"Fin is typing\"/> : null}>\n                            {messages.map((message, i) => {\n                                return <Message key={i} model={message} />\n                            })}\n                        </MessageList>\n                        <MessageInput placeholder='Type message here' onSend={handleSend}/>\n                    </ChatContainer>\n                </MainContainer>\n            </div>\n        </div>\n    );\n}\n\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}